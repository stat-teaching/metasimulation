{
  "hash": "0d3bbb547136fbae0f7748ec2b5dd3dd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to Meta-Analysis\"\nexecute: \n  echo: true\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: \"#>\"\n---\n\n\n\n\n\n\n# Meta-analysis {.section}\n\n## Meta-analysis\n\n- The meta-analysis is a statistical procedure to combine evidence from a group of studies.\n\n. . .\n\n- The idea is to \"switch\" the statistical unit from e.g., participants to studies\n\n. . .\n\n- The motto could be that (appropriately) combining similar studies with a similar aim is the best way to understand something about a phenomenon\n\n## Meta-analysis and Systematic Review {.smaller}\n\nUsually a meta-analysis work follows these steps:\n\n1. **Identify the research question**: is the treatment *x* effective?, Does the experimental effect *y* exist?\n2. **Define inclusion/exclusion criteria**: From the research question (1), keep only e.g., randomized controlled trials, studies with healthy participants, etc.\n3. **Systematically search for studies**: Analyze the literature to find all relevant studies\n4. **Extract relevant information**: Read, extract and organize relevant information e.g., sample size, treatment type, age, etc.\n5. **Summarize the results**: Create a narrative (flowcharts, tables, etc.) summary of included studies. This is the Systematic review part.\n6. **Choose an effect size**: Choose a way to standardize the effect across included studies\n7. **Meta-analysis model**: Choose and implement a meta-analysis model\n8. **Interpret and report results**\n\n## Before the fun part...\n\n::: {.incremental}\n- We are dealing only with the **statistical part**. The study selection, data extraction, studies evaluation etc. is another story\n- The quality of the meta-analysis is the **quality of included studies**\n:::\n\n. . .\n\n![](img/gigo.png){fig-align=\"center\" width=60%}\n\n## Unstandardized effect sizes\n\nThe basic idea of an effect size is just using the raw measure. For example studies using reaction times we can calculate the difference between two conditions as $\\overline X_1 - \\overline X_2$:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](intro-meta-analysis_files/figure-revealjs/unnamed-chunk-3-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## Unstandardized effect sizes\n\nBut another study (with the same research question) could use another measure, e.g., accuracy. We can still (not the best strategy but) compute the difference between the group means.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](intro-meta-analysis_files/figure-revealjs/unnamed-chunk-4-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Unstandardized effect sizes\n\nClearly we cannot directly compare the two effects but we need to standardize the measure.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](intro-meta-analysis_files/figure-revealjs/unnamed-chunk-5-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## Standardized effect sizes\n\nTo compare results from different studies, we should use a common metric. Frequently meta-analysts use *standardized* effect sizes. For example the Pearson correlation or the Cohen's $d$.\n\n$$\nr = \\frac{\\sum{(x_i - \\bar{x})(y_i - \\bar{y})}}{\\sqrt{\\sum{(x_i - \\bar{x})^2}\\sum{(y_i - \\bar{y})^2}}}\n$$ {#eq-correlation}\n\n$$\nd = \\frac{\\bar{x_1} - \\bar{x_2}}{s_p}\n$$\n\n$$\ns_p = \\sqrt{\\frac{(n_1 - 1)s_1^2 + (n_2 - 1)s_2^2}{n_1 + n_2 - 2}}\n$$\n\n## Standardized effect sizes\n\nThe advantage of standardized effect size is that regardless the original variable, the interpretation and the scale is the same. For example the pearson correlation ranges between -1 and 1 and the Cohen's $d$ between $- \\infty$ and $\\infty$ and is interpreted as how many standard deviations the two groups/conditions differs.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nS <- matrix(c(1, 0.7, 0.7, 1), nrow = 2)\nX <- MASS::mvrnorm(100, c(0, 2), S, empirical = TRUE)\n\npar(mfrow = c(1,2))\nplot(X, xlab = \"x\", ylab = \"y\", cex = 1.3, pch = 19,\n     cex.lab = 1.2, cex.axis = 1.2,\n     main = latex2exp::TeX(sprintf(\"$r = %.2f$\", cor(X[, 1], X[, 2]))))\nabline(lm(X[, 2] ~ X[, 1]), col = \"firebrick\", lwd = 2)\n\n\nplot(density(X[, 1]), xlim = c(-5, 7), ylim = c(0, 0.5), col = \"dodgerblue\", lwd = 2,\n     main = latex2exp::TeX(sprintf(\"$d = %.2f$\", lsr::cohensD(X[, 1], X[, 2]))),\n     xlab = \"\")\nlines(density(X[, 2]), col = \"firebrick\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![](intro-meta-analysis_files/figure-revealjs/unnamed-chunk-6-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## Standardized vs unstandardized\n\nThe main difference is (usually) the absence of a effect-size-variance relationship for unstandardized effects. For example, the variance of the difference between two groups is:\n\n$$\nV_d = \\frac{s^2_1}{n_1} + \\frac{s^2_2}{n_2}\n$$ {#eq-var-umd}\n\nWhile the variance of a Cohen's $d$ can be calculated as:\n\n$$\nV_d = \\frac{n_1 + n_2}{n_1 n_2} + \\frac{d^2}{2(n_1 + n_2)}\n$$\n\n## Standardized vs unstandardized\n\nIn this [amazing blog post](https://www.jepusto.com/alternative-formulas-for-the-smd/) James Pustejovsky explained where the equations comes from. Basically, the $\\frac{n_1 + n_2}{n_1 n_2}$ term is the same as the $\\frac{s^2_1}{n_1} + \\frac{s^2_2}{n_2}$ while the extra $\\frac{d^2}{2(n_1 + n_2)}$ is for the non-centrality induced by the standardized difference.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nn <- c(10, 50, 100)\nd <- seq(0, 2, 0.001)\n\ndd <- expand.grid(n = n, d = d)\n\ndd$vumd <- with(dd, 1/n + 1/n)\ndd$vd <- with(dd, (n + n) / (n * n) + d^2/(2 * (n + n)))\n\ntidyr::pivot_longer(dd, 3:4) |> \n  ggplot(aes(x = d, y = value, color = name, linetype = factor(n))) +\n  geom_line() +\n  labs(linetype = \"Sample Size\",\n       color = NULL)\n```\n\n::: {.cell-output-display}\n![](intro-meta-analysis_files/figure-revealjs/unnamed-chunk-7-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## Effect size sampling variability {#sec-effsize-se}\n\nCrucially, we can calculate also the **sampling variability** of each effect size. The **sampling variability** is the precision of estimated value.\n\nFor example, there are multiple methods to estimate the Cohen's $d$ sampling variability. For example:\n\n$$\nV_d = \\frac{n_1 + n_2}{n_1 n_2} + \\frac{d^2}{2(n_1 + n_2)}\n$$\n\nEach effect size has a specific formula for the sampling variability. The sample size is usually the most important information. Studies with high sample size have low sampling variability.\n\n## Effect size sampling variability\n\nAs the sample size grows and tends to infinity, the sampling variability approach zero.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](intro-meta-analysis_files/figure-revealjs/unnamed-chunk-8-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## Unstandardized effect sizes\n\nFor the examples and plots I'm going to use simulated data. We simulate *unstandardized* effect sizes (UMD) because the computations are easier and the estimator is unbiased [e.g., @Viechtbauer2005-zt]\n\nMore specifically we simulate hypothetical studies where two independent groups are compared:\n\n$$\n\\Delta = \\overline{X_1} - \\overline{X_2}\n$$ {#eq-umd}\n\n$$\nSE_{\\Delta} = \\sqrt{\\frac{s^2_1}{n_1} + \\frac{s^2_2}{n_2}}\n$$\n\nWith $X_{1_i} \\sim \\mathcal{N}(0, 1)$ and $X_{2_i} \\sim \\mathcal{N}(\\Delta, 1)$\n\nThe main advantage is that, compared to standardized effect size, the sampling variability do not depends on the effect size itself, simplifying the computations.\n\n# Simulating a single study {.section}\n\n## Simulating a single study - UMD\n\nTo simulate a single study using a UMD we need to generate data according to the appropriate model. Here we have a difference between two groups. We can assume that the two groups comes from a normal distribution where group 1 $g_1 \\sim \\mathcal{N}(0, 1)$ and group 2 $g_2 \\sim \\mathcal{N}(D, 1)$ where $D$ is the effect size. Then using Equations [-@eq-var-umd; -@eq-umd] we can estimate the effect size and the variance.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nD <- 1  # effect size\nn <- 50 # sample size\ng1 <- rnorm(n, mean = 0, sd = 1)\ng2 <- rnorm(n, mean = D, sd = 1)\n\n# effect size\nmean(g2) - mean(g1)\n#> [1] 1.17167\n\n# variance\nvar(g1)/n + var(g2)/n\n#> [1] 0.05124246\n```\n:::\n\n\n## Simulating a single study - UMD\n\nFor simplicity we can wrap everything within a function:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# default sd = 1\nsim_umd <- function(n1, n2 = NULL, D, sd = 1){\n  if(is.null(n2)) n2 <- n1 # same to n1 if null \n  g1 <- rnorm(n1, mean = 0, sd = sd)\n  g2 <- rnorm(n2, mean = D, sd = sd)\n  yi <- mean(g2) - mean(g1)\n  vi <- var(g1)/n1 + var(g2)/n2\n  data.frame(yi, vi)\n}\n\nsim_umd(100, D = 0.5)\n#>          yi         vi\n#> 1 0.7514419 0.02152775\nsim_umd(50, D = 0.1)\n#>           yi         vi\n#> 1 -0.1518401 0.04384679\n```\n:::\n\n\n## Simulating a single study - UMD\n\nWe can also generate a large number of studies and check the distribution of effect size and sampling variances. Note that the real $D = 1$ and the real variance $V_D = 1/50 + 1/50 = 0.04$\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstudies <- replicate(1000, sim_umd(n1 = 50, D = 1), simplify = FALSE) # simplify = FALSE return a list\nstudies <- do.call(rbind, studies) # to dataframe\nhead(studies)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>         yi         vi\n#> 1 1.022529 0.03624869\n#> 2 1.299403 0.03773793\n#> 3 1.311345 0.04071511\n#> 4 1.186370 0.04869345\n#> 5 1.272829 0.03067824\n#> 6 1.024730 0.03448273\n```\n\n\n:::\n:::\n\n\n## Simulating a single study - UMD {#sec-umd-sampling-distribution}\n\nThen we can plot the sampling distributions:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](intro-meta-analysis_files/figure-revealjs/unnamed-chunk-12-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## Simulating a single study - SMD\n\nThe idea is the same when simulating a SDM but we need extra steps. Let's adjust the previous function:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsim_smd <- function(n1, n2 = NULL, D){\n  if(is.null(n2)) n2 <- n1 # same to n1 if null \n  g1 <- rnorm(n1, mean = 0, sd = 1)\n  g2 <- rnorm(n2, mean = D, sd = 1)\n  \n  v1 <- var(g1)\n  v2 <- var(g2)\n  \n  # pooled standard deviation\n  sp <- sqrt((v1 * (n1 - 1) + v2 * (n2 - 1)) / (n1 + n2 - 2))\n  \n  yi <- (mean(g2) - mean(g1)) / sp\n  vi <- (n1 + n2) / (n1 * n2) + yi^2/(2*(n1 + n2))\n  data.frame(yi, vi)\n}\n```\n:::\n\n\n## Simulating a single study - SMD\n\nWhen working with SMD, calculating the sampling variance can be challenging. @Veroniki2016-nw identified 16 different estimators with different properties. Furthermore, it is a common practice to correct the SDM effect and variance using the Hedges's correction [@Hedges1989-ip]. \n\nYou can directly implement another equation for the sampling variance or the Hedges's correction directly in the simulation function.\n\n## Simulating a single study - Pearson $\\rho$\n\nAnother common effect size is the Pearson correlation coefficient $\\rho$ (and the estimate $r$, see @eq-correlation). The variance of the correlation is calculated as:\n\n$$\nV_{r} = \\frac{(1 - r^2)^2}{n - 1}\n$$\n\n## Simulating a single study - Pearson $\\rho$\n\nThere is a huge dependency between $r$ and it's sampling variance (similar to the Cohen's $d$):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nn <- 50\nr <- seq(0, 1, 0.01)\nv <- (1 - r^2)^2 / (n - 1) \n\nplot(r, v, type = \"l\", main = \"N = 50\", xlab = \"r\", ylab = latex2exp::TeX(\"$V_r$\"))\n```\n\n::: {.cell-output-display}\n![](intro-meta-analysis_files/figure-revealjs/unnamed-chunk-14-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## Simulating a single study - Pearson $\\rho$\n\nFor this reason the so-called Fisher's $z$ transformation is used to stabilize the relationship.\n\n$$\nz = \\frac{\\log{\\frac{1 + r}{1 - r}}}{2}\n$$\n\n$$\nV_z = \\frac{1}{n - 3}\n$$\n\nNow the variance is completely independent from the correlation value.\n\n## Simulating a single study - Pearson $\\rho$\n\nThis is the relationship between $r$ and $z$:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nn <- 50\nr <- seq(-1, 1, 0.01)\nv <- (1 - r^2)^2 / (n - 1) \nz <- log((1 + r)/(1 - r))/2\n\nplot(z, r, type = \"l\", xlab = \"Fisher's z\", ylab = \"Correlation\", main = \"Correlation to Fisher's z\")\n```\n\n::: {.cell-output-display}\n![](intro-meta-analysis_files/figure-revealjs/unnamed-chunk-15-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## Simulating a single study - Pearson $\\rho$\n\nTo simulate a study using correlations we can use the `MASS::mvrnorm()` function that can generate correlated data from a multivariate normal distribution.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsim_r <- function(n, r){\n  R <- r + diag(1 - r, nrow = 2) # 2 x 2 correlation matrix\n  X <- MASS::mvrnorm(n, mu = c(0, 0), Sigma = R) # the means are not relevant here\n  r <- cor(X)[1, 2] # extract correlation\n  vr <- (1 - r^2)^2 / (n - 1)  # variance of r\n  yi <- log((1 + r)/(1 - r))/2 # fisher z\n  vi <- 1 / (n - 3) # fisher z variance\n  data.frame(yi, vi, r, vr) # including also the pearson correlation and variance\n}\n```\n:::\n\n\n## Simulating a single study - Pearson $\\rho$\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsim_r(100, 0.5)\n#>          yi         vi         r          vr\n#> 1 0.5295713 0.01030928 0.4850533 0.005907088\nsim_r(50, 0.8)\n#>         yi        vi         r          vr\n#> 1 1.053749 0.0212766 0.7832596 0.003048686\n\n# also here the sampling distributions\nstudies <- replicate(1000, sim_r(50, 0.7), simplify = FALSE)\nstudies <- do.call(rbind, studies)\nsummary(studies)\n#>        yi               vi                r                vr          \n#>  Min.   :0.3897   Min.   :0.02128   Min.   :0.3711   Min.   :0.001078  \n#>  1st Qu.:0.7880   1st Qu.:0.02128   1st Qu.:0.6573   1st Qu.:0.003831  \n#>  Median :0.8802   Median :0.02128   Median :0.7065   Median :0.005119  \n#>  Mean   :0.8824   Mean   :0.02128   Mean   :0.7006   Mean   :0.005382  \n#>  3rd Qu.:0.9794   3rd Qu.:0.02128   3rd Qu.:0.7528   3rd Qu.:0.006584  \n#>  Max.   :1.3652   Max.   :0.02128   Max.   :0.8776   Max.   :0.015174\n```\n:::\n\n\n## More on effect sizes\n\nThe same logic can be applied to any situation. Just understand the data generation process, find the effect size equations and generate data.\n\n- @Borenstein2009-mo for all effect sizes equations. Also with equations to convert among effect sizes (useful in real-world meta-analyses)   \n- the [`metafor::escalc()`](https://wviechtb.github.io/metafor/reference/escalc.html) function implements basically any effect size. You can see also the [source code](https://github.com/wviechtb/metafor/blob/master/R/escalc.r) to see the actual R implementation.\n- [Guide to effect sizes](https://matthewbjane.quarto.pub/guide-to-effect-sizes-and-confidence-intervals): a modern and complete overview of effect sizes\n\n## Simulating from sampling distributions [#extra]\n\nThe previous simulation examples are participant-level simulations. In fact we simulated $n$ observations then we aggregated calculating the effect sizes.\n\n. . .\n\nThis is the most flexible and general data simulation strategy but is computationally not efficient.\n\n. . .\n\nAnother strategy individuate the exact effect size sampling distribution. Then we can sample directly from it. The downside is that we need to derive (or find) the equation.\n\n## Simulating from sampling distributions [#extra]\n\nFor example, when generating UMD we can simulate from the sampling distribution presented in @sec-umd-sampling-distribution.\n\n$$\ny_i \\sim \\mathcal{N}(\\theta, \\sqrt{\\sigma^2_i})\n$$\n$$\n\\sigma^2_i \\sim \\frac{\\chi^2_{n_1 + n_2 - 2}}{n_1 + n_2 - 2} (\\frac{1}{n_1} + \\frac{1}{n_2})\n$$\n\nIn this way we can sample $k$ effects and sampling variances directly from the sampling distributions. Without generating data and then aggregate.\n\n## Simulating from sampling distributions [#extra]\n\nWe can again put everything within a function:\n\n```r\nsim_k_umd <- function(k, D, n1, n2 = NULL){\n  if(is.null(n2)) n2 <- n1\n  yi <- rnorm(k, D, sqrt(1/n1 + 1/n2))\n  vi <- (rchisq(k, n1 + n2 - 2) / (n1 + n2 - 2)) * (1/n1 + 1/n2)\n  data.frame(yi, vi)\n}\n```\n\n## Simulating from sampling distributions [#extra]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsim_k_umd(k = 10, D = 0.5, n1 = 50)\n#>             yi         vi\n#> 1  0.441673639 0.03465664\n#> 2  0.007023467 0.03956105\n#> 3  0.777497664 0.03361501\n#> 4  0.331056159 0.02802565\n#> 5  0.534304746 0.04043977\n#> 6  0.416041978 0.03970752\n#> 7  0.605978689 0.04123184\n#> 8  0.798596509 0.04485353\n#> 9  0.063068832 0.04414264\n#> 10 0.272322780 0.03005496\n```\n:::\n\n\n## Simulating from sampling distributions [#extra]\n\nWe can compare the two methods and see that we are sampling from the same data generation process.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nk <- 1e4\ns_umd <- sim_k_umd(k, D = 1, n1 = 50)\nip_umd <- replicate(k, sim_umd(n1 = 50, D = 1), simplify = FALSE)\nip_umd <- do.call(rbind, ip_umd)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](intro-meta-analysis_files/figure-revealjs/unnamed-chunk-20-1.svg){fig-align='center' width=960}\n:::\n:::\n\n\n## Simulating from sampling distributions [#extra]\n\nThe actual advantage is in terms of computational speed. To simulate $k = 10$ studies for 1000 times (similar to a standard Monte Carlo simulation):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbench <- microbenchmark::microbenchmark(\n  sampling = sim_k_umd(k = 10, n1 = 50, D = 1),\n  participant = replicate(10, sim_umd(n1 = 50, D = 1)),\n  times = 1000 \n)\n\n(bench <- summary(bench))\n#>          expr     min       lq      mean   median       uq      max neval cld\n#> 1    sampling  76.670  78.2280   79.9311  79.0890   80.237  181.917  1000  a \n#> 2 participant 980.105 990.8675 1035.0935 996.8535 1005.300 4041.862  1000   b\n\nbench$mean[2] / bench$mean[1] # faster\n#> [1] 12.94982\n```\n:::\n\n\n## References <button class=\"btn\"><i class=\"fa fa-download\"></i><a href=\"data:text/x-bibtex;base64,QE1JU0N7Qm9yZW5zdGVpbjIwMDktbW8sCiAgdGl0bGUgPSB7SW50cm9kdWN0aW9uIHRvIHtNZXRhLUFuYWx5c2lzfX0sCiAgYXV0aG9yID0ge0JvcmVuc3RlaW4sIE1pY2hhZWwgYW5kIEhlZGdlcywgTGFycnkgViBhbmQgSGlnZ2lucywgSnVsaWFuIFAgVCBhbmQKICBSb3Roc3RlaW4sIEhhbm5haCBSfSwKICBkYXRlID0gezIwMDl9LAogIGRvaSA9IHsxMC4xMDAyLzk3ODA0NzA3NDMzODZ9LAogIHVybCA9IHtodHRwOi8vZHguZG9pLm9yZy8xMC4xMDAyLzk3ODA0NzA3NDMzODZ9LAogIGtleXdvcmRzID0ge01BIFVuY29uc2Npb3VzIFdNfQp9CgpAQVJUSUNMRXtWZXJvbmlraTIwMTYtbncsCiAgdGl0bGUgPSB7TWV0aG9kcyB0byBlc3RpbWF0ZSB0aGUgYmV0d2Vlbi1zdHVkeSB2YXJpYW5jZSBhbmQgaXRzIHVuY2VydGFpbnR5IGluCiAgbWV0YS1hbmFseXNpc30sCiAgYXV0aG9yID0ge1Zlcm9uaWtpLCBBcmV0aSBBbmdlbGlraSBhbmQgSmFja3NvbiwgRGFuIGFuZCBWaWVjaHRiYXVlciwgV29sZmdhbmcKICBhbmQgQmVuZGVyLCBSYWxmIGFuZCBCb3dkZW4sIEphY2sgYW5kIEtuYXBwLCBHdWlkbyBhbmQgS3VzcywgT2xpdmVyIGFuZAogIEhpZ2dpbnMsIEp1bGlhbiBQIFQgYW5kIExhbmdhbiwgRGVhbiBhbmQgU2FsYW50aSwgR2VvcmdpYX0sCiAgam91cm5hbHRpdGxlID0ge1Jlc2VhcmNoIHN5bnRoZXNpcyBtZXRob2RzfSwKICBwdWJsaXNoZXIgPSB7V2lsZXl9LAogIHZvbHVtZSA9IHs3fSwKICBpc3N1ZSA9IHsxfSwKICBwYWdlcyA9IHs1NS03OX0sCiAgZGF0ZSA9IHsyMDE2LTAzfSwKICBkb2kgPSB7MTAuMTAwMi9qcnNtLjExNjR9LAogIHBtYyA9IHtQTUM0OTUwMDMwfSwKICBwbWlkID0gezI2MzMyMTQ0fSwKICBpc3NuID0gezE3NTktMjg3OSwxNzU5LTI4ODd9LAogIGFic3RyYWN0ID0ge01ldGEtYW5hbHlzZXMgYXJlIHR5cGljYWxseSB1c2VkIHRvIGVzdGltYXRlIHRoZSBvdmVyYWxsL21lYW4gb2YKICBhbiBvdXRjb21lIG9mIGludGVyZXN0LiBIb3dldmVyLCBpbmZlcmVuY2UgYWJvdXQgYmV0d2Vlbi1zdHVkeSB2YXJpYWJpbGl0eSwKICB3aGljaCBpcyB0eXBpY2FsbHkgbW9kZWxsZWQgdXNpbmcgYSBiZXR3ZWVuLXN0dWR5IHZhcmlhbmNlIHBhcmFtZXRlciwgaXMKICB1c3VhbGx5IGFuIGFkZGl0aW9uYWwgYWltLiBUaGUgRGVyU2ltb25pYW4gYW5kIExhaXJkIG1ldGhvZCwgY3VycmVudGx5IHdpZGVseQogIHVzZWQgYnkgZGVmYXVsdCB0byBlc3RpbWF0ZSB0aGUgYmV0d2Vlbi1zdHVkeSB2YXJpYW5jZSwgaGFzIGJlZW4gbG9uZwogIGNoYWxsZW5nZWQuIE91ciBhaW0gaXMgdG8gaWRlbnRpZnkga25vd24gbWV0aG9kcyBmb3IgZXN0aW1hdGlvbiBvZiB0aGUKICBiZXR3ZWVuLXN0dWR5IHZhcmlhbmNlIGFuZCBpdHMgY29ycmVzcG9uZGluZyB1bmNlcnRhaW50eSwgYW5kIHRvIHN1bW1hcmlzZSB0aGUKICBzaW11bGF0aW9uIGFuZCBlbXBpcmljYWwgZXZpZGVuY2UgdGhhdCBjb21wYXJlcyB0aGVtLiBXZSBpZGVudGlmaWVkIDE2CiAgZXN0aW1hdG9ycyBmb3IgdGhlIGJldHdlZW4tc3R1ZHkgdmFyaWFuY2UsIHNldmVuIG1ldGhvZHMgdG8gY2FsY3VsYXRlCiAgY29uZmlkZW5jZSBpbnRlcnZhbHMsIGFuZCBzZXZlcmFsIGNvbXBhcmF0aXZlIHN0dWRpZXMuIFNpbXVsYXRpb24gc3R1ZGllcwogIHN1Z2dlc3QgdGhhdCBmb3IgYm90aCBkaWNob3RvbW91cyBhbmQgY29udGludW91cyBkYXRhIHRoZSBlc3RpbWF0b3IgcHJvcG9zZWQKICBieSBQYXVsZSBhbmQgTWFuZGVsIGFuZCBmb3IgY29udGludW91cyBkYXRhIHRoZSByZXN0cmljdGVkIG1heGltdW0gbGlrZWxpaG9vZAogIGVzdGltYXRvciBhcmUgYmV0dGVyIGFsdGVybmF0aXZlcyB0byBlc3RpbWF0ZSB0aGUgYmV0d2Vlbi1zdHVkeSB2YXJpYW5jZS4KICBCYXNlZCBvbiB0aGUgc2NlbmFyaW9zIGFuZCByZXN1bHRzIHByZXNlbnRlZCBpbiB0aGUgcHVibGlzaGVkIHN0dWRpZXMsIHdlCiAgcmVjb21tZW5kIHRoZSBRLXByb2ZpbGUgbWV0aG9kIGFuZCB0aGUgYWx0ZXJuYXRpdmUgYXBwcm9hY2ggYmFzZWQgb24gYQogICdnZW5lcmFsaXNlZCBDb2NocmFuIGJldHdlZW4tc3R1ZHkgdmFyaWFuY2Ugc3RhdGlzdGljJyB0byBjb21wdXRlCiAgY29ycmVzcG9uZGluZyBjb25maWRlbmNlIGludGVydmFscyBhcm91bmQgdGhlIHJlc3VsdGluZyBlc3RpbWF0ZXMuIE91cgogIHJlY29tbWVuZGF0aW9ucyBhcmUgYmFzZWQgb24gYSBxdWFsaXRhdGl2ZSBldmFsdWF0aW9uIG9mIHRoZSBleGlzdGluZwogIGxpdGVyYXR1cmUgYW5kIGV4cGVydCBjb25zZW5zdXMuIEV2aWRlbmNlLWJhc2VkIHJlY29tbWVuZGF0aW9ucyByZXF1aXJlIGFuCiAgZXh0ZW5zaXZlIHNpbXVsYXRpb24gc3R1ZHkgd2hlcmUgYWxsIG1ldGhvZHMgd291bGQgYmUgY29tcGFyZWQgdW5kZXIgdGhlIHNhbWUKICBzY2VuYXJpb3MufSwKICB1cmwgPSB7aHR0cHM6Ly9vbmxpbmVsaWJyYXJ5LndpbGV5LmNvbS9kb2kvMTAuMTAwMi9qcnNtLjExNjR9LAogIGZpbGUgPSB7VmVyb25pa2kgZXQgYWwuIDIwMTYgLSBNZXRob2RzIHRvIGVzdGltYXRlIHRoZSBiZXR3ZWVuLXN0dWR5IHZhcmlhbmNlIGFuZCBpdHMgdW5jZXJ0YWludHkgaW4gbWV0YS1hbmFseXNpcy5wZGZ9LAogIGtleXdvcmRzID0ge2JpYXM7IGNvbmZpZGVuY2UgaW50ZXJ2YWw7IGNvdmVyYWdlIHByb2JhYmlsaXR5OyBoZXRlcm9nZW5laXR5OwogIG1lYW4gc3F1YXJlZCBlcnJvcjtNQSBDb2Rpbmd9LAogIGxhbmd1YWdlID0ge2VufQp9CgpAQVJUSUNMRXtIZWRnZXMxOTg5LWlwLAogIHRpdGxlID0ge0FuIHVuYmlhc2VkIGNvcnJlY3Rpb24gZm9yIHNhbXBsaW5nIGVycm9yIGluIHZhbGlkaXR5IGdlbmVyYWxpemF0aW9uCiAgc3R1ZGllc30sCiAgYXV0aG9yID0ge0hlZGdlcywgTGFycnkgVn0sCiAgam91cm5hbHRpdGxlID0ge1RoZSBKb3VybmFsIG9mIGFwcGxpZWQgcHN5Y2hvbG9neX0sCiAgcHVibGlzaGVyID0ge0FtZXJpY2FuIFBzeWNob2xvZ2ljYWwgQXNzb2NpYXRpb24gKEFQQSl9LAogIHZvbHVtZSA9IHs3NH0sCiAgaXNzdWUgPSB7M30sCiAgcGFnZXMgPSB7NDY5LTQ3N30sCiAgZGF0ZSA9IHsxOTg5LTA2fSwKICBkb2kgPSB7MTAuMTAzNy8wMDIxLTkwMTAuNzQuMy40Njl9LAogIGlzc24gPSB7MDAyMS05MDEwLDE5MzktMTg1NH0sCiAgdXJsID0ge2h0dHA6Ly9keC5kb2kub3JnLzEwLjEwMzcvMDAyMS05MDEwLjc0LjMuNDY5fSwKICBsYW5ndWFnZSA9IHtlbn0KfQoKQEFSVElDTEV7VmllY2h0YmF1ZXIyMDA1LXp0LAogIHRpdGxlID0ge0JpYXMgYW5kIGVmZmljaWVuY3kgb2YgbWV0YS1hbmFseXRpYyB2YXJpYW5jZSBlc3RpbWF0b3JzIGluIHRoZQogIHJhbmRvbS1lZmZlY3RzIG1vZGVsfSwKICBhdXRob3IgPSB7VmllY2h0YmF1ZXIsIFdvbGZnYW5nfSwKICBqb3VybmFsdGl0bGUgPSB7Sm91cm5hbCBvZiBlZHVjYXRpb25hbCBhbmQgYmVoYXZpb3JhbCBzdGF0aXN0aWNzOiBhIHF1YXJ0ZXJseQogIHB1YmxpY2F0aW9uIHNwb25zb3JlZCBieSB0aGUgQW1lcmljYW4gRWR1Y2F0aW9uYWwgUmVzZWFyY2ggQXNzb2NpYXRpb24gYW5kIHRoZQogIEFtZXJpY2FuIFN0YXRpc3RpY2FsIEFzc29jaWF0aW9ufSwKICBwdWJsaXNoZXIgPSB7QW1lcmljYW4gRWR1Y2F0aW9uYWwgUmVzZWFyY2ggQXNzb2NpYXRpb24gKEFFUkEpfSwKICB2b2x1bWUgPSB7MzB9LAogIGlzc3VlID0gezN9LAogIHBhZ2VzID0gezI2MS0yOTN9LAogIGRhdGUgPSB7MjAwNS0wOX0sCiAgZG9pID0gezEwLjMxMDIvMTA3Njk5ODYwMzAwMDMyNjF9LAogIGlzc24gPSB7MTA3Ni05OTg2LDE5MzUtMTA1NH0sCiAgYWJzdHJhY3QgPSB7VGhlIG1ldGEtYW5hbHl0aWMgcmFuZG9tIGVmZmVjdHMgbW9kZWwgYXNzdW1lcyB0aGF0IHRoZQogIHZhcmlhYmlsaXR5IGluIGVmZmVjdCBzaXplIGVzdGltYXRlcyBkcmF3biBmcm9tIGEgc2V0IG9mIHN0dWRpZXMgY2FuIGJlCiAgZGVjb21wb3NlZCBpbnRvIHR3byBwYXJ0czogaGV0ZXJvZ2VuZWl0eSBkdWUgdG8gcmFuZG9tIHBvcHVsYXRpb24gZWZmZWN0cyBhbmQKICBzYW1wbGluZyB2YXJpYW5jZS4gSW4gdGhpcyBjb250ZXh0LCB0aGUgdXN1YWwgZ29hbCBpcyB0byBlc3RpbWF0ZSB0aGUgY2VudHJhbAogIHRlbmRlbmN5IGFuZCB0aGUgYW1vdW50IG9mIGhldGVyb2dlbmVpdHkgaW4gdGhlIHBvcHVsYXRpb24gZWZmZWN0IHNpemVzLiBUaGUKICBhbW91bnQgb2YgaGV0ZXJvZ2VuZWl0eSBpbiBhIHNldCBvZiBlZmZlY3Qgc2l6ZXMgaGFzIGltcGxpY2F0aW9ucyByZWdhcmRpbmcKICB0aGUgaW50ZXJwcmV0YXRpb24gb2YgdGhlIG1ldGEtYW5hbHl0aWMgZmluZGluZ3MgYW5kIG9mdGVuIHNlcnZlcyBhcyBhbgogIGluZGljYXRvciBmb3IgdGhlIHByZXNlbmNlIG9mIHBvdGVudGlhbCBtb2RlcmF0b3IgdmFyaWFibGVzLiBGaXZlIHBvcHVsYXRpb24KICBoZXRlcm9nZW5laXR5IGVzdGltYXRvcnMgd2VyZSBjb21wYXJlZCBpbiB0aGlzIGFydGljbGUgYW5hbHl0aWNhbGx5IGFuZCB2aWEKICBNb250ZSBDYXJsbyBzaW11bGF0aW9ucyB3aXRoIHJlc3BlY3QgdG8gdGhlaXIgYmlhcyBhbmQgZWZmaWNpZW5jeS59LAogIHVybCA9IHtodHRwczovL3NjaG9sYXIuZ29vZ2xlLmNvbS9jaXRhdGlvbnM/dmlld19vcD12aWV3X2NpdGF0aW9uJmhsPWVuJnVzZXI9Sjg5UlhKa0FBQUFKJmNpdGF0aW9uX2Zvcl92aWV3PUo4OVJYSmtBQUFBSjpxak1ha0ZIRHk3c0N9LAogIGxhbmd1YWdlID0ge2VufQp9Cgo=\" download=\"refs_to_download.bib\"> Download .bib file</a></button> {.refs}\n\n::: {#refs}\n:::",
    "supporting": [
      "intro-meta-analysis_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}